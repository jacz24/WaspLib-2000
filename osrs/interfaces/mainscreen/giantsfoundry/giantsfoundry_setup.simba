(*
# Giants' Foundry Mould Interface
Interface for handling the Giants' Foundry mould selection and setup.
This interface allows automatic selection of optimal moulds based on
Kovac's commission requirements.
```{figure} ../../images/shop_interface.png
```
*)

{$DEFINE WL_GIANTFOUNDRY_MOULD_INCLUDED}
{$INCLUDE_ONCE WaspLib/osrs.simba}

type
  (*
## ERSFoundryAttribute
```pascal
ERSFoundryAttribute = (HEAVY, LIGHT, BROAD, NARROW, FLAT, SPIKED);
```
Enum representing the different mould attributes in Giants' Foundry.
Each commission from Kovac requires two of these attributes.
*)
  ERSFoundryAttribute = (HEAVY, LIGHT, BROAD, NARROW, FLAT, SPIKED);

(*
## ERSFoundryMouldType
```pascal
ERSFoundryMouldType = (FORTE, BLADE, TIP);
```
Enum representing the possible mould types
*)
  ERSFoundryMouldType = enum(FORTE, BLADE, TIP);

(*
## TRSFoundryMould
Record representing a single mould piece with its attributes and scores.
*)
  TRSFoundryMould = record
    Name: String;
    MouldType: ERSFoundryMouldType;
    Heavy: Int32;
    Light: Int32;
    Broad: Int32;
    Narrow: Int32;
    Flat: Int32;
    Spiked: Int32;
    LevelRequired: Int32;
    IsDefault: Boolean;
  end;

(*
## TRSFoundryCommission
Record representing Kovac's commission requirements.
*)
  TRSFoundryCommission = record
    Attribute1: ERSFoundryAttribute;
    Attribute2: ERSFoundryAttribute;
  end;

(*
## TRSFoundryMouldSelection
Record representing a complete mould setup (Forte, Blade, Tip).
*)
  TRSFoundryMouldSelection = record
    Forte: TRSFoundryMould;
    Blade: TRSFoundryMould;
    Tip: TRSFoundryMould;
    TotalScore: Int32;
  end;

  TRSGiantsFoundrySetup = record
    Title: TRSInterfaceTitle;
    Scroll: TRSScrollBar;

    Bounds, MouldsArea, CommisionBox: TBox;
    MouldSlots: TBoxArray;
    SetMouldButton, ResetMouldButton: TRSButton;
    MouldTypeButtons: array [ERSFoundryMouldType] of TRSButton;
    AvailableMoulds: array of TRSFoundryMould;

  end;


function TRSGiantsFoundrySetup.FindMouldBoundaries(): TBoxArray;
var
  tpa, final: TPointArray;
  atpa: T2DPointArray;
  b: TBox;
  stack: ERSStack;
begin
  // All white[$CBCFD1, 0.000, EColorSpace.RGB, [1.000, 1.000, 1.000]]
  // the brick[$9BA8AD, 0.000, EColorSpace.RGB, [1.000, 1.000, 1.000]]
  // [$96A4A5, 18.051, EColorSpace.RGB, [1.055, 1.080, 0.866]]
  final := Target.FindColor($96A4A5, 24, Self.MouldsArea);
  if final = [] then Exit;

  atpa := final.Cluster(200, 5);
  Writeln(atpa);
  for tpa in atpa do
  begin
    b := tpa.Bounds();
    if b.Height <= 28 then Continue;
    Result += TBoxArray.Create([Self.MouldsArea.X1, b.Y1-5], 1, 1, 300, Min(Self.MouldsArea.Y2-b.Y1, 38), [0, 17]);

  end;
end;

(*
## GiantsFoundrySetup.SetupInterface
```pascal
procedure TRSGiantsFoundrySetup.SetupInterface();
```
Internal method used to setup the {ref}`TRSGiantsFoundrySetup` coordinates.
This is automatically called for you on the {ref}`GiantsFoundry` variable.
*)
procedure TRSGiantsFoundrySetup.SetupInterface();
var
  boxes: TBoxArray;
  mouldtype: ERSFoundryMouldType;
begin
  case RSClient.Mode of
    ERSMode.FIXED:
      Self.Bounds := MSInterface.CreateBounds([0, 0, 0, 0], 480, 314);
    ERSMode.RESIZABLE, ERSMode.MODERN_COMPACT, ERSMode.MODERN_WIDE:
      Self.Bounds := MSInterface.CreateBounds([0, 0, 0, 0], 480, 314); //846, 800 // TODO fix dynamic adjusting?
  end;



  with Self.Bounds do
  begin
    Self.MouldsArea := TBox.Create(X1 + 134, Y1 + 129, X2-36, Y2-20);
    Self.CommisionBox := TBox.Create(X1 + 9, Y1 + 240, X2-360, Y2-9);

    Self.SetMouldButton.Bounds := TBox.Create(X1 + 345, Y1 + 78, X2 - 9, Y2 - 199);
    Self.ResetMouldButton.Bounds := TBox.Create(X1 + 345, Y1 + 38, X2 - 9, Y2 - 239);
    boxes := TBoxArray.Create([X1 + 9,Y1 + 118], 1, 3, 114, 37, [0, 4]);
    Self.MouldSlots := TBoxArray.Create([X1 + 135,Y1 + 130], 1, 4, 300, 42, [0, -2]);
  end;

  Self.Scroll.Area := Self.MouldsArea;
  Self.Scroll.Setup();
  Self.Title.Setup(Self.Bounds);


  Self.SetMouldButton.EnabledColors := [[$0F1043, 0], [$23269F, 0.227]];
  for mouldtype := Low(ERSFoundryMouldType) to High(ERSFoundryMouldType) do
  begin
    Self.MouldTypeButtons[mouldtype].Bounds := boxes[Ord(mouldtype)];
  end;

end;

procedure TRSGiantsFoundrySetup.Draw(img: TImage);
var
  i: Integer;
begin
  //if not Self.IsOpen() then Exit;

  img.DrawColor := $00FFFF;
  img.DrawBox(Self.Bounds);
  img.DrawBox(Self.MouldsArea);
  img.DrawBox(Self.CommisionBox);
  img.DrawBox(Self.SetMouldButton.Bounds);
  img.DrawBox(Self.ResetMouldButton.Bounds);

  img.DrawColor := $854F31;
  //img.DrawBoxArray(Self.MouldSlots, False);
  img.DrawBoxArray(Self.FindMouldBoundaries, False);
  Self.Scroll.Draw(img);
  for i := 0 to High(Self.MouldTypeButtons) do
    Self.MouldTypeButtons[i].Draw(img);
end;

procedure TRSGiantsFoundrySetup.ShowOnTarget();
var
  img: TImage;
begin
  img := Target.GetImage();
  Self.Draw(img);
  img.Show();
end;
var
(*
## GiantsFoundrySetup variable
Global {ref}`TRSGiantsFoundrySetup` variable.
*)
  GiantsFoundrySetup: TRSGiantsFoundrySetup;
